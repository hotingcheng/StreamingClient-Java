/*
 * JNetProbe.java
 *
 */


/**
 *
 * @author  htcheng0
 * @version 
 */


import javax.media.*;
import com.sun.media.ui.*;
import javax.media.protocol.*;
import javax.media.protocol.DataSource;
//import javax.swing.*;
import javax.swing.event.*;
import java.awt.*;
import java.awt.event.*;
import java.net.*;
import java.io.*;
import java.util.Vector;

import java.lang.*;
import javax.swing.*;
import java.text.*;

public class JNetProbe extends javax.swing.JFrame implements Runnable{

    private javax.swing.ButtonGroup iProtocol = new javax.swing.ButtonGroup();
    private javax.swing.ButtonGroup iOption = new javax.swing.ButtonGroup();
   
    private ThreadSend toSend;
    private ThreadRecv toRecv;
   // private MediaThread MediaTh;
    private StatisticsWakeUpThread timer;
    private int action;
    private String filename;
    private  FileDialog fd;
//    private Dialog Dialogmd;
    private MDIApp MediaScreen;
    private JFrame md;

    private String PlaybackFile;
    private FileDialog FileSaveAs;
    private FileDialog FileBrowse;
    private String Rfile;
    
    /** Creates new form JNetProbe */
    public JNetProbe() {
        super("JNetProbe");
        
        initComponents ();
        selfinitComponents();
        pack ();
        setSize(750, 400);
        jSend.setEnabled(false);
    

        
	
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        jlocalhostname = new javax.swing.JTextField();
        jlocalport = new javax.swing.JTextField();
        jpeerhostname = new javax.swing.JTextField();
        jpeerport = new javax.swing.JTextField();
        jRefreshInterval = new javax.swing.JTextField();
        jPacketSize = new javax.swing.JTextField();
        jSendRate = new javax.swing.JTextField();
        jPacketno = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jTCP = new javax.swing.JRadioButton();
        jUDP = new javax.swing.JRadioButton();
        jLabel19 = new javax.swing.JLabel();
        jFile = new javax.swing.JCheckBox();
        jLabel20 = new javax.swing.JLabel();
        jStream = new javax.swing.JCheckBox();
        jMulticast = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jDataRate = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLossPercentage = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPacketTransferred = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPacketLost = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTimeElapsed = new javax.swing.JLabel();
        jSend = new javax.swing.JButton();
        jReceive = new javax.swing.JButton();
        jPlayback = new javax.swing.JButton();
        jQuit = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jRequestFS = new javax.swing.JLabel();
        jFilePath = new javax.swing.JTextField();
        jSaveAs = new javax.swing.JButton();
        jStreamPath = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jStreamPlay = new javax.swing.JButton();
        jFilePath2 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jS = new javax.swing.JRadioButton();
        jP = new javax.swing.JRadioButton();
        jD = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        jPlayback2 = new javax.swing.JButton();
        jDownload = new javax.swing.JButton();
        jBrowse = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        getContentPane().setLayout(null);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        }
        );
        
        jPanel1.setLayout(null);
        jPanel1.setBorder(new javax.swing.border.TitledBorder("Client Connection Panel"));
        
        jlocalhostname.setText("localhost");
          jPanel1.add(jlocalhostname);
          jlocalhostname.setBounds(70, 470, 190, 30);
          
          
        jlocalport.setText("8000");
          jPanel1.add(jlocalport);
          jlocalport.setBounds(960, 330, 50, 30);
          
          
        jpeerhostname.setText("ieugp11");
          jpeerhostname.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jpeerhostnameActionPerformed(evt);
              }
          }
          );
          jPanel1.add(jpeerhostname);
          jpeerhostname.setBounds(120, 20, 160, 20);
          
          
        jpeerport.setText("8000");
          jPanel1.add(jpeerport);
          jpeerport.setBounds(280, 20, 40, 20);
          
          
        jRefreshInterval.setText("100");
          jRefreshInterval.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jTextField5ActionPerformed(evt);
              }
          }
          );
          jPanel1.add(jRefreshInterval);
          jRefreshInterval.setBounds(930, 230, 80, 30);
          
          
        jPacketSize.setText("10240");
          jPanel1.add(jPacketSize);
          jPacketSize.setBounds(120, 40, 80, 20);
          
          
        jSendRate.setText("10240");
          jPanel1.add(jSendRate);
          jSendRate.setBounds(940, 250, 80, 30);
          
          
        jPacketno.setText("0");
          jPanel1.add(jPacketno);
          jPacketno.setBounds(920, 340, 80, 30);
          
          
        jLabel11.setText("Hostname");
          jPanel1.add(jLabel11);
          jLabel11.setLocation(920, 440);
          jLabel11.setSize(jLabel11.getPreferredSize());
          
          
        jLabel12.setText("Port");
          jPanel1.add(jLabel12);
          jLabel12.setLocation(960, 280);
          jLabel12.setSize(jLabel12.getPreferredSize());
          
          
        jLabel13.setText("Local:");
          jPanel1.add(jLabel13);
          jLabel13.setLocation(0, -150);
          jLabel13.setSize(jLabel13.getPreferredSize());
          
          
        jLabel14.setText("location : port");
          jPanel1.add(jLabel14);
          jLabel14.setLocation(10, 20);
          jLabel14.setSize(jLabel14.getPreferredSize());
          
          
        jLabel15.setText("Refresh Interval (ms):");
          jPanel1.add(jLabel15);
          jLabel15.setLocation(920, 230);
          jLabel15.setSize(jLabel15.getPreferredSize());
          
          
        jLabel16.setText("Packet Size (Bytes):");
          jPanel1.add(jLabel16);
          jLabel16.setLocation(10, 40);
          jLabel16.setSize(jLabel16.getPreferredSize());
          
          
        jLabel17.setText("Sending Rate (Bps):");
          jPanel1.add(jLabel17);
          jLabel17.setLocation(940, 250);
          jLabel17.setSize(jLabel17.getPreferredSize());
          
          
        jLabel18.setText("# Packets to Send:");
          jPanel1.add(jLabel18);
          jLabel18.setBounds(920, 360, jLabel18.getPreferredSize().width, 10);
          
          
        jTCP.setSelected(true);
          jTCP.setText("TCP");
          jTCP.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jTCPActionPerformed(evt);
              }
          }
          );
          jPanel1.add(jTCP);
          jTCP.setLocation(120, 60);
          jTCP.setSize(jTCP.getPreferredSize());
          
          
        jUDP.setText("UDP");
          jPanel1.add(jUDP);
          jUDP.setLocation(190, 60);
          jUDP.setSize(jUDP.getPreferredSize());
          
          
        jLabel19.setText("Protocol");
          jPanel1.add(jLabel19);
          jLabel19.setBounds(20, 60, 60, 30);
          
          
        jFile.setText("Save File ");
          jFile.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jCheckBox1ActionPerformed(evt);
              }
          }
          );
          jPanel1.add(jFile);
          jFile.setLocation(860, 280);
          jFile.setSize(jFile.getPreferredSize());
          
          
        jLabel20.setText("Type");
          jPanel1.add(jLabel20);
          jLabel20.setLocation(960, 410);
          jLabel20.setSize(jLabel20.getPreferredSize());
          
          
        jStream.setLabel("Stream");
          jStream.setText("Stream File");
          jStream.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jStreamActionPerformed(evt);
              }
          }
          );
          jPanel1.add(jStream);
          jStream.setLocation(950, 310);
          jStream.setSize(jStream.getPreferredSize());
          
          
        jMulticast.setText("Multi cast");
          jMulticast.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jMulticastActionPerformed(evt);
              }
          }
          );
          jPanel1.add(jMulticast);
          jMulticast.setLocation(240, 50);
          jMulticast.setSize(jMulticast.getPreferredSize());
          
          
        getContentPane().add(jPanel1);
        jPanel1.setBounds(10, 30, 340, 120);
        
        
        jPanel2.setLayout(new java.awt.GridLayout(5, 2));
        jPanel2.setBorder(new javax.swing.border.TitledBorder("Statistics Display Panel"));
        
        jLabel1.setText("Data Transfer Rate:");
          jPanel2.add(jLabel1);
          
          
        jDataRate.setText("0 Bps");
          jPanel2.add(jDataRate);
          
          
        jLabel3.setText("Packet Loss (%)");
          jPanel2.add(jLabel3);
          
          
        jLossPercentage.setText("0 %");
          jPanel2.add(jLossPercentage);
          
          
        jLabel5.setText("# Packets Transferred:");
          jPanel2.add(jLabel5);
          
          
        jPacketTransferred.setText("0");
          jPanel2.add(jPacketTransferred);
          
          
        jLabel7.setText("# Packets Lost:");
          jPanel2.add(jLabel7);
          
          
        jPacketLost.setText("0");
          jPanel2.add(jPacketLost);
          
          
        jLabel9.setText("Time Elapsed:");
          jPanel2.add(jLabel9);
          
          
        jTimeElapsed.setText("0.0 s");
          jPanel2.add(jTimeElapsed);
          
          
        getContentPane().add(jPanel2);
        jPanel2.setBounds(10, 580, 380, 160);
        
        
        jSend.setText("Send");
        jSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        }
        );
        
        getContentPane().add(jSend);
        jSend.setBounds(950, 410, 110, 30);
        
        
        jReceive.setText("Receive");
        jReceive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jReceiveActionPerformed(evt);
            }
        }
        );
        
        getContentPane().add(jReceive);
        jReceive.setBounds(970, 370, 110, 30);
        
        
        jPlayback.setText("Playback");
        jPlayback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jHostInfoActionPerformed(evt);
            }
        }
        );
        
        getContentPane().add(jPlayback);
        jPlayback.setBounds(960, 420, 110, 30);
        
        
        jQuit.setText("Quit");
        jQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        }
        );
        
        getContentPane().add(jQuit);
        jQuit.setBounds(10, 340, 110, 20);
        
        
        jPanel4.setLayout(null);
        jPanel4.setBorder(new javax.swing.border.TitledBorder("File Panel"));
        
        jRequestFS.setText("File Streaming");
          jPanel4.add(jRequestFS);
          jRequestFS.setLocation(10, 50);
          jRequestFS.setSize(jRequestFS.getPreferredSize());
          
          
        jFilePath.setEditable(false);
          jPanel4.add(jFilePath);
          jFilePath.setBounds(90, 80, 130, 20);
          
          
        jSaveAs.setText("Save As");
          jSaveAs.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jSaveAsActionPerformed(evt);
              }
          }
          );
          jPanel4.add(jSaveAs);
          jSaveAs.setBounds(220, 80, 90, 20);
          
          
        jStreamPath.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jStreamPathActionPerformed(evt);
              }
          }
          );
          jPanel4.add(jStreamPath);
          jStreamPath.setBounds(90, 50, 130, 20);
          
          
        jLabel2.setText("Playback file");
          jPanel4.add(jLabel2);
          jLabel2.setLocation(10, 130);
          jLabel2.setSize(jLabel2.getPreferredSize());
          
          
        jStreamPlay.setText("Stream");
          jStreamPlay.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jStreamPlayActionPerformed(evt);
              }
          }
          );
          jPanel4.add(jStreamPlay);
          jStreamPlay.setBounds(220, 50, 90, 20);
          
          
        jFilePath2.setEditable(false);
          jPanel4.add(jFilePath2);
          jFilePath2.setBounds(90, 130, 130, 20);
          
          
        jLabel6.setText("OPTIONS");
          jPanel4.add(jLabel6);
          jLabel6.setLocation(10, 20);
          jLabel6.setSize(jLabel6.getPreferredSize());
          
          
        jS.setSelected(true);
          jS.setText("Stream");
          jS.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jSActionPerformed(evt);
              }
          }
          );
          jPanel4.add(jS);
          jS.setBounds(90, 20, 70, 20);
          
          
        jP.setText("Playback");
          jP.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jPActionPerformed(evt);
              }
          }
          );
          jPanel4.add(jP);
          jP.setBounds(160, 20, 70, 20);
          
          
        jD.setText("Download");
          jD.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jDActionPerformed(evt);
              }
          }
          );
          jPanel4.add(jD);
          jD.setBounds(240, 20, 80, 20);
          
          
        jLabel8.setText("Download File");
          jPanel4.add(jLabel8);
          jLabel8.setLocation(10, 80);
          jLabel8.setSize(jLabel8.getPreferredSize());
          
          
        jPlayback2.setText("Playback");
          jPlayback2.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jButton1ActionPerformed(evt);
              }
          }
          );
          jPanel4.add(jPlayback2);
          jPlayback2.setBounds(220, 150, 90, 20);
          
          
        jDownload.setText("Download");
          jDownload.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jButton2ActionPerformed(evt);
              }
          }
          );
          jPanel4.add(jDownload);
          jDownload.setBounds(220, 100, 90, 20);
          
          
        jBrowse.setText("Browse");
          jBrowse.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jButton3ActionPerformed(evt);
              }
          }
          );
          jPanel4.add(jBrowse);
          jBrowse.setBounds(220, 130, 90, 20);
          
          
        getContentPane().add(jPanel4);
        jPanel4.setBounds(10, 150, 340, 190);
        
        
        jLabel4.setText("Java Media Player");
        jLabel4.setFont(new java.awt.Font ("Dialog", 3, 30));
        
        getContentPane().add(jLabel4);
        jLabel4.setLocation(20, 0);
        jLabel4.setSize(jLabel4.getPreferredSize());
        
        
        jLabel10.setText("Playing ... ");
        jLabel10.setForeground(new java.awt.Color (51, 255, 255));
        jLabel10.setFont(new java.awt.Font ("Arial", 1, 48));
        
        getContentPane().add(jLabel10);
        jLabel10.setLocation(440, 150);
        jLabel10.setSize(jLabel10.getPreferredSize());
        
    }//GEN-END:initComponents

  private void jMulticastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMulticastActionPerformed
// Add your handling code here:
/*      String locator=null;
  	String hostString = jpeerhostname.getText().trim();
  	//String fileString = "5.mpg";
        String fileString = jStreamPath.getText().trim();
  	int PacketSize = Integer.parseInt(jPacketSize.getText().trim(), 10);
  	int port = Integer.parseInt(jpeerport.getText().trim(), 10);
  	if( jTCP.isSelected() )
*/  	String	locator = new String( "multicast://" +"234.5.6.7"+ ":" +8190+ ":" +10240+ "/" +"twins.mpg" );
//  	else	locator = new String( "udp://" +hostString+ ":" +port+ ":" +PacketSize+ "/" +fileString );
  	
  	MediaLocator new_media = new MediaLocator( locator );
  	PlayMedia play = new PlayMedia( new_media );
  }//GEN-LAST:event_jMulticastActionPerformed

  private void jDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDActionPerformed
// Add your handling code here:
       if (jD.isSelected())
      {
          jStreamPlay.setEnabled(false);
          jBrowse.setEnabled(false);
          jPlayback2.setEnabled(false);
            jSaveAs.setEnabled(true);
          jDownload.setEnabled(true);
      }
      else
      {
        jStreamPlay.setEnabled(true);
          jBrowse.setEnabled(true);
          jPlayback2.setEnabled(true);
      }
       
  }//GEN-LAST:event_jDActionPerformed

  private void jPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPActionPerformed
// Add your handling code here:
      if (jP.isSelected())
      {
          jSaveAs.setEnabled(false);
          jDownload.setEnabled(false);
          jStreamPlay.setEnabled(false);
            jBrowse.setEnabled(true);
          jPlayback2.setEnabled(true);
          
      }
      else
      {
          jSaveAs.setEnabled(true);
          jDownload.setEnabled(true);
         jStreamPlay.setEnabled(true);
      }
      
  }//GEN-LAST:event_jPActionPerformed

  private void jSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSActionPerformed
// Add your handling code here:
      if (jS.isSelected())
      {
          jSaveAs.setEnabled(false);
          jDownload.setEnabled(false);
          jBrowse.setEnabled(false);
          jPlayback2.setEnabled(false);
          jStreamPlay.setEnabled(true);
      }
      else
      {
          jSaveAs.setEnabled(true);
          jDownload.setEnabled(true);
          jBrowse.setEnabled(true);
          jPlayback2.setEnabled(true);
      }
      
  }//GEN-LAST:event_jSActionPerformed

  private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
// Add your handling code here:
        Rfile = jStreamPath.getText().trim();
	  System.out.println(Rfile);
	 
          if (jDownload.getText().compareTo("Download") == 0) 
	   {
//                jPacketTransferred.setText(Integer.toString(0));
 //               jPacketLost.setText(Integer.toString(0));
  //              jLossPercentage.setText("0 %");
   //             jDataRate.setText(" 0 Bps");
    //            jTimeElapsed.setText("0 s");
       
//            if (action != 0)
  //              return;
//            if (Integer.parseInt(jRefreshInterval.getText().trim(), 10) <= 0) {
  //                JMessageBox ErrBox = new JMessageBox("Refresh Interval should be a non-zero number!", "JNetProbe Error");
    //              ErrBox.show();
      //            return;
        //    }
            jDownload.setText("Stop");
            action = 2;
            try{
            toRecv = new ThreadRecv(jpeerhostname.getText().trim(), Integer.parseInt(jpeerport.getText().trim(), 10), Integer.parseInt(jPacketSize.getText().trim(), 10), jTCP.isSelected(), filename, Rfile);
            toRecv.start();
//            timer = new StatisticsWakeUpThread(Integer.parseInt(jRefreshInterval.getText().trim(), 10), this);
//            timer.start();
            } catch (Exception e) {e.printStackTrace();}
//            hold();
        }
        else {
            if (action == 2) {
                jDownload.setText("Download");
                action = 0;
                toRecv.QuitRecv();
//                timer.QuitUpdate();
 //               nothold();
            }
  	}
      
  }//GEN-LAST:event_jButton2ActionPerformed

  private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
// Add your handling code here:
      FileBrowse = new FileDialog(this, "Save As", FileDialog.LOAD);     
      FileBrowse.show();
//      System.out.println(FileSaveAs.getDirectory()+ " " +FileSaveAs.getFile());
      jFilePath2.setText(FileBrowse.getDirectory()+FileBrowse.getFile());           
      
      filename = jFilePath2.getText().trim();
      System.out.println(filename);
   
  }//GEN-LAST:event_jButton3ActionPerformed

  private void jpeerhostnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jpeerhostnameActionPerformed
// Add your handling code here:
  }//GEN-LAST:event_jpeerhostnameActionPerformed

  private void jStreamPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStreamPlayActionPerformed
  	
  	String locator=null;
  	String hostString = jpeerhostname.getText().trim();
  	//String fileString = "5.mpg";
        String fileString = jStreamPath.getText().trim();
  	int PacketSize = Integer.parseInt(jPacketSize.getText().trim(), 10);
  	int port = Integer.parseInt(jpeerport.getText().trim(), 10);
  	if( jTCP.isSelected() )
  		locator = new String( "tcp://" +hostString+ ":" +port+ ":" +PacketSize+ "/" +fileString );
  	else	locator = new String( "udp://" +hostString+ ":" +port+ ":" +PacketSize+ "/" +fileString );
  	
  	MediaLocator new_media = new MediaLocator( locator );
  	PlayMedia play = new PlayMedia( new_media );
//  	  	JPlayer3 play = new JPlayer3( new_media, panel1);
//  	LoadInputStream b = new LoadInputStream(jlocalhostname.getText().trim(), Integer.parseInt(jlocalport.getText().trim(), 10), Integer.parseInt(jPacketSize.getText().trim(), 10), jTCP.isSelected(), "test.mpg");
// Add your handling code here:
/*    
  try{
    pos = new PipedOutputStream();
    pis = new PipedInputStream(pos);

      
      
    ThreadReceivetoStream c =new ThreadReceivetoStream(jpeerhostname.getText().trim(), Integer.parseInt(jlocalport.getText().trim(), 10), Integer.parseInt(jPacketSize.getText().trim(), 10), jTCP.isSelected(), "test.zip", pos);    
    c.start();
    //sleep(3000);
//    try{
//    Thread.currentThread().sleep(3000);
//    }catch( InterruptedException ie ) {}
   LoadInputStream b = new LoadInputStream(pis, "shit.mpg");
 //ThreadPlayer d = new ThreadPlayer( pis );
 //d.start();
    }catch( IOException ioe ) {}      
  */  
/*
	InputStream a = null;
     a = connect(jlocalhostname.getText().trim(), Integer.parseInt(jlocalport.getText().trim(), 10), jTCP.isSelected(), "shit.mpg");
     System.out.println("after connected");
 //     connect();
     
     
     
    if( a!= null )
    {
        System.out.println("a not null");
	LoadInputStream b = new LoadInputStream(a, "shit.mpg");
    }
    else
        System.out.println("a null"); 
*/
  }//GEN-LAST:event_jStreamPlayActionPerformed

  private void jStreamPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStreamPathActionPerformed
// Add your handling code here:
  }//GEN-LAST:event_jStreamPathActionPerformed

  private void jStreamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStreamActionPerformed
// Add your handling code here:
      if (jStream.isSelected())
      {
 //      jReceive.setEnabled(true);
        jStreamPlay.setEnabled(true);
        jStreamPath.setEnabled(true);
      }
      else
      {
 //         jReceive.setEnabled(false);
          jStreamPlay.setEnabled(false);          
          jStreamPath.setEnabled(false);
      }
      
  }//GEN-LAST:event_jStreamActionPerformed

  private void jHostInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jHostInfoActionPerformed
//////l// Add your handling code here:    
    
    filename = jFilePath2.getText();
      System.out.println(filename);
      
    PlaybackFile = filename;
    MediaScreen = new MDIApp(PlaybackFile);
//      MediaTh = new MediaThread();      
 //     MediaTh.start();    
  }//GEN-LAST:event_jHostInfoActionPerformed

  private void jSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveAsActionPerformed
// Add your handling code here:
      FileSaveAs = new FileDialog(this, "Save As", FileDialog.SAVE);     
      FileSaveAs.show();
//      System.out.println(FileSaveAs.getDirectory()+ " " +FileSaveAs.getFile());
      jFilePath.setText(FileSaveAs.getDirectory()+FileSaveAs.getFile());           
      
      filename = jFilePath.getText();
      System.out.println(filename);
      
      if (filename=="nullnull"  || filename.length()==0){
             jReceive.setEnabled(false); 
             JMessageBox ErrBox = new JMessageBox("Please input the file path!", "JNetProbe Error");
              ErrBox.show();
      }
      else
      {
        jReceive.setEnabled(true);
        jFilePath.setEnabled(false);
      }
      
      
      
      
  }//GEN-LAST:event_jSaveAsActionPerformed

  private void jReceiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jReceiveActionPerformed
// Add your handling code here:

	  Rfile = jStreamPath.getText().trim();
	  System.out.println(Rfile);
          if (jReceive.getText().compareTo("Receive") == 0) {
//                jPacketTransferred.setText(Integer.toString(0));
 //               jPacketLost.setText(Integer.toString(0));
  //              jLossPercentage.setText("0 %");
   //             jDataRate.setText(" 0 Bps");
    //            jTimeElapsed.setText("0 s");
       
            if (action != 0)
                return;
            if (Integer.parseInt(jRefreshInterval.getText().trim(), 10) <= 0) {
                  JMessageBox ErrBox = new JMessageBox("Refresh Interval should be a non-zero number!", "JNetProbe Error");
                  ErrBox.show();
                  return;
            }
            jReceive.setText("Stop Recv");
            action = 2;
            try{
            toRecv = new ThreadRecv(jpeerhostname.getText().trim(), Integer.parseInt(jpeerport.getText().trim(), 10), Integer.parseInt(jPacketSize.getText().trim(), 10), jTCP.isSelected(), filename, Rfile);
            toRecv.start();
//            timer = new StatisticsWakeUpThread(Integer.parseInt(jRefreshInterval.getText().trim(), 10), this);
//            timer.start();
            } catch (Exception e) {e.printStackTrace();}
//            hold();
        }
        else {
            if (action == 2) {
                jReceive.setText("Receive");
                action = 0;
                toRecv.QuitRecv();
//                timer.QuitUpdate();
 //               nothold();
            }
  	}
      
      
  }//GEN-LAST:event_jReceiveActionPerformed

  private void jTCPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTCPActionPerformed
// Add your handling code here:
  }//GEN-LAST:event_jTCPActionPerformed

  private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
// Add your handling code here:
  }//GEN-LAST:event_jTextField5ActionPerformed

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
//        System.out.println(" Button1 Action");
    
 //   if (filename = jFilePath2.getText().trim() == "") 
    	filename = jFilePath2.getText().trim();
    
     System.out.println(filename);
     
    PlaybackFile = filename;
    MediaScreen = new MDIApp(PlaybackFile);
      
/*// Add your handling code here:
     if (jSend.getText().compareTo("Send") == 0) {
            if (action != 0)
                return;
            if (Integer.parseInt(jRefreshInterval.getText().trim(), 10) <= 0) {
                  JMessageBox ErrBox = new JMessageBox("Refresh Interval should be a non-zero number!", "JNetProbe Error");
                  ErrBox.show();
                  return;
            }
            jSend.setText("Stop Send");
            action = 1;
            toSend = new ThreadSend(jpeerhostname.getText().trim(), Integer.parseInt(jpeerport.getText().trim(), 10), Integer.parseInt(jPacketSize.getText().trim(), 10), Integer.parseInt(jSendRate.getText().trim(), 10), Integer.parseInt(jPacketno.getText().trim(), 10), jTCP.isSelected());
            toSend.start();
//            timer = new StatisticsWakeUpThread(Integer.parseInt(jRefreshInterval.getText().trim(), 10), this);
//            timer.start();
//            hold();
        }
        else {
            if (action == 1) {
                jSend.setText("Send");
                action = 0;
                toSend.QuitSend();
//                timer.QuitUpdate();
//                nothold();
            }
        }
   */         
  }//GEN-LAST:event_jButton1ActionPerformed

  private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
// Add your handling code here:
      System.exit(0);
  }//GEN-LAST:event_jButton4ActionPerformed

  private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
      
      action = 0;
      
       if( jFile.isSelected())
       {
   //        jFilePath.setEnabled(true);
          jSaveAs.setEnabled(true);
           jReceive.setEnabled(false);
       }
       else
       {
           //jLabel1.setText("Shit");
  //         jFilePath.setEnabled(false);
           jSaveAs.setEnabled(false);
          jReceive.setEnabled(true);
         }
        //    jPanel4.setEnabled( false );
        //else jPanel4.setEnabled( true );
        // Add your handling code here:
  }//GEN-LAST:event_jCheckBox1ActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit (0);
    }//GEN-LAST:event_exitForm

    /**
    * @param args the command line arguments
    */
    public static void main (String args[]) {
        new JNetProbe ().show ();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jlocalhostname;
    private javax.swing.JTextField jlocalport;
    private javax.swing.JTextField jpeerhostname;
    private javax.swing.JTextField jpeerport;
    private javax.swing.JTextField jRefreshInterval;
    private javax.swing.JTextField jPacketSize;
    private javax.swing.JTextField jSendRate;
    private javax.swing.JTextField jPacketno;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JRadioButton jTCP;
    private javax.swing.JRadioButton jUDP;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JCheckBox jFile;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JCheckBox jStream;
    private javax.swing.JButton jMulticast;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jDataRate;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLossPercentage;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jPacketTransferred;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jPacketLost;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jTimeElapsed;
    private javax.swing.JButton jSend;
    private javax.swing.JButton jReceive;
    private javax.swing.JButton jPlayback;
    private javax.swing.JButton jQuit;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel jRequestFS;
    private javax.swing.JTextField jFilePath;
    private javax.swing.JButton jSaveAs;
    private javax.swing.JTextField jStreamPath;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton jStreamPlay;
    private javax.swing.JTextField jFilePath2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JRadioButton jS;
    private javax.swing.JRadioButton jP;
    private javax.swing.JRadioButton jD;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JButton jPlayback2;
    private javax.swing.JButton jDownload;
    private javax.swing.JButton jBrowse;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel10;
    // End of variables declaration//GEN-END:variables
    
    
    private PipedInputStream pis;
    private PipedOutputStream pos;
private void selfinitComponents()
{
//    jHostInfo.setEnabled(false);
    FileSaveAs = null;
    fd = null;
    iProtocol.add(jTCP);
    iProtocol.add(jUDP);
    
    iOption.add(jS);
    iOption.add(jP);
    iOption.add(jD);
    
    jFilePath.setEnabled(false);
    jSaveAs.setEnabled(false);
    jStreamPlay.setEnabled(false);          
    filename ="";
    jSaveAs.setEnabled(false);
    jDownload.setEnabled(false);
    jBrowse.setEnabled(false);
    jPlayback2.setEnabled(false);
     jStreamPlay.setEnabled(true);
    
  
           
}

public void run() {
      if (action == 1) {
            if (toSend.isSending()) {
      	        jPacketTransferred.setText(Integer.toString(toSend.getpackettransferred()));
                jDataRate.setText(ConvertRate(toSend.getdatarate()));
                jTimeElapsed.setText(ConvertDouble(toSend.getTimeElapsed())+ " s");
                jPacketLost.setText(" -- ");
                jLossPercentage.setText(" -- ");
            }
            else {
                action = 0;
                jSend.setText("Send");
//                timer.QuitUpdate();
            }
        }
        else if (action == 2) {
            if (toRecv.isReceiving()) {
                jPacketTransferred.setText(Integer.toString(toRecv.getpackettransferred()));
                jPacketLost.setText(Integer.toString(toRecv.getpacketloss()));
                jLossPercentage.setText(toRecv.getlossrate() + " %");
                jDataRate.setText(ConvertRate(toRecv.getdatarate()));
                jTimeElapsed.setText(ConvertDouble(toRecv.getTimeElapsed()) + " s");
            }
            else if (!toRecv.isRunning()){
                action = 0;
                jReceive.setText("Receive");
//                timer.QuitUpdate();
            }
        }
    }
    
    public String ConvertDouble(double invalue) {
        DecimalFormat numformat=(DecimalFormat)NumberFormat.getInstance();
	numformat.setMaximumFractionDigits(1);
	numformat.setMinimumFractionDigits(1);
        numformat.setGroupingUsed(false);
        return numformat.format(invalue);
    }

    public String ConvertRate(double inrate) {
       	double rate = inrate;
	rate = inrate/1000000;
	if (rate > 10)
	    return (ConvertDouble(rate) + " MBps");
	else {
	    rate = inrate/1000;
	    if (rate > 10)
		return (ConvertDouble(rate) + " kBps");
            else
		return (ConvertDouble(inrate) + " Bps");
	}
    }
    
    public void hold()
    {
        jlocalhostname.setEnabled(false);
        jlocalport.setEnabled(false);
        jpeerhostname.setEnabled(false);
        jpeerport.setEnabled(false);
        jRefreshInterval.setEnabled(false);
        jPacketSize.setEnabled(false);
        jSendRate.setEnabled(false);
        jPacketno.setEnabled(false);
        jTCP.setEnabled(false);
        jUDP.setEnabled(false);
        jFile.setEnabled(false);
    }
    
    public void nothold()
    {
        jlocalhostname.setEnabled(true);
        jlocalport.setEnabled(true);
        jpeerhostname.setEnabled(true);
        jpeerport.setEnabled(true);
        jRefreshInterval.setEnabled(true);
        jPacketSize.setEnabled(true);
        jSendRate.setEnabled(true);
        jPacketno.setEnabled(true);
        jTCP.setEnabled(true);
        jUDP.setEnabled(true);
        jFile.setEnabled(true);
    }
    
	public InputStream connect(String localhostname, int localport,boolean iProtocol, String filename)
    {
	String hostname;
	int port;
	int PacketSize;
	boolean protocol;	// 1 -- TCP ; 0 -- UDP
	boolean bRunning;
	byte[] Buffer;
	InetAddress addr;
	ServerSocket TCPAcceptServer=null;
	Socket TCPServer=null;
	InputStream a=null;
	DatagramSocket UDPServer;
	
	bRunning = false;
//      bquit = false;
//      starttime = System.currentTimeMillis();
      hostname = new String(localhostname);
      port = localport;
      protocol = iProtocol;
      
      bRunning = true;
//      Buffer = new byte[PacketSize];
  	
      if (filename.length()!=0)
      {
  //        filep = filename;
//          File = true;
      }
      else
      {
          System.out.println("must enter file intended to stream");
      }
	
     try {
     	System.out.println("Connecting");
          addr = InetAddress.getByName(hostname);
          if (protocol)
              TCPAcceptServer = new ServerSocket(port, 1, addr);	// assume backlog = 1
//          else
//              UDPServer = new DatagramSocket(port, addr);
      } catch (Exception e) { JMessageBox ErrBox = new JMessageBox(e.getMessage(), "JNetProbe Error");
                              ErrBox.show();
                              bRunning = false; }
     try {                         
 	
 	
	 TCPServer = TCPAcceptServer.accept();
	System.out.println("Connected"); 
	a=TCPServer.getInputStream();
     } catch (Exception e) { JMessageBox ErrBox = new JMessageBox(e.getMessage(), "JNetProbe Error");
                              ErrBox.show();
                              bRunning = false; }
      return a;
    }
        


}
